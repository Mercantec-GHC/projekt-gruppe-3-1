@page "/"

@* Injecting actually creates a new instance of a class. *@

@using BlazorApp.Service;
@inject EvCar ElectricCar;
@inject DBService DbService;
@* @inject MongoDBService MongoService; *@

<PageTitle>Andreas's gaming lounge</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<p>@_neonConnectionStatus</p>
<p>@MongoConnectionStatus</p>

@* Form for a vehicle *@
<EditForm Model="@ElectricCar" OnValidSubmit="HandleValidEvCar">

    @*<div class="form-group">
        <label for="Price">Price:</label>
        <InputNumber id="Price" class="form-control"
                   Value="@ElectricCar.Price" ValueChanged="@(e => ElectricCar.SetPrice((decimal)e))"
                   ValueExpression="(() => ElectricCar.Price)" />
    </div>*@

    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@ElectricCar.Brand" ValueChanged="@(e => ElectricCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => ElectricCar.Brand)"/>
    </div>

    @*<div class="form-group">
        <label for="Model">Model name:</label>
        <InputText id="Model" class="form-control"
                   Value="@ElectricCar.Model" ValueChanged="@(e => ElectricCar.SetModel(e.ToString()))"
                   ValueExpression="(() => ElectricCar.Model)"/>
    </div>*@
    @*
    <div class="form-group">
        <label for="Year">Year:</label>
        <InputNumber id="Year" class="form-control"
                   Value="@ElectricCar.Year" ValueChanged="@(e => ElectricCar.SetYear((int)e))"
                   ValueExpression="(() => ElectricCar.Year)" />
    </div>
    <div class="form-group">
        <label for="KmDriven">Km driven:</label>
        <InputNumber id="KmDriven" class="form-control"
                   Value="@ElectricCar.KmDriven" ValueChanged="@(e => ElectricCar.SetKmDriven((double)e))"
                   ValueExpression="(() => ElectricCar.KmDriven)" />
    </div>
    <div class="form-group">
        <label for="Color">Color name:</label>
        <InputText id="Color" class="form-control"
                   Value="@ElectricCar.Color" ValueChanged="@(e => ElectricCar.SetColor(e.ToString()))"
                   ValueExpression="(() => ElectricCar.Color)" />
    </div>
    <div class="form-group">
        <label for="WeightKg">Weight:</label>
        <InputNumber id="WeightKg" class="form-control"
                   Value="@ElectricCar.WeightKg" ValueChanged="@(e => ElectricCar.SetWeightKg((int)e))"
                   ValueExpression="(() => ElectricCar.WeightKg)" />
    </div>
    <div class="form-group">
        <label for="HorsePower">Horse power:</label>
        <InputNumber id="HorsePower" class="form-control"
                   Value="@ElectricCar.HorsePower" ValueChanged="@(e => ElectricCar.SetHorsePower((int)e))"
                   ValueExpression="(() => ElectricCar.HorsePower)" />
    </div>
    <div class="form-group">
        <label for="Doors">Doors:</label>
        <InputNumber id="Doors" class="form-control"
                   Value="@ElectricCar.Doors" ValueChanged="@(e => ElectricCar.SetDoors((int)e))"
                   ValueExpression="(() => ElectricCar.Doors)" />
    </div>*@

</EditForm>

@code{

    private void HandleValidEvCar()
    {
        ElectricCar.PrintBrand();
    }

    private string _neonConnectionStatus = "Not using neon.tech.";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var connection = DbService.GetConnection();
            if (connection.State == System.Data.ConnectionState.Open)
            {
                _neonConnectionStatus = "Database connection successful";
            }
            else
            {
                _neonConnectionStatus = "Failed to connect to database";
            }
        }
        catch (Exception e)
        {
            _neonConnectionStatus = $"Error: {e.Message}";
        }
    }

    private string? MongoConnectionStatus = "Not using Mongo";
    /* protected override async Task OnInitializedAsync()
    {
        if (await MongoService.CheckConnectionAsync())
        {
            MongoConnectionStatus = "Database connection successful";
        }
        else
        {
            MongoConnectionStatus = "Failed to connect to database";
        }
    }*/


}