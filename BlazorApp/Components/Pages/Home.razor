@page "/"

@* Injecting actually creates a new instance of a class. *@

@using BlazorApp.Service;
@* @inject DBService DbService; *@
@inject EvCar ElectricCar; 
@inject MongoDBService MongoService;

<PageTitle>Andreas's gaming lounge</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<p>@NeonConnectionStatus</p>
<p>@MongoConnectionStatus</p>

@* Form for a vehicle *@
<EditForm Model="@ElectricCar" OnValidSubmit="HandleValidEvCar">
    
    @*<div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Price" class="form-control"
                   Value="@evCar.Price" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>*@
    
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control" 
                   Value="@ElectricCar.Brand" ValueChanged="@(e => ElectricCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => ElectricCar.Brand)" />
    </div>

    @*<div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>
    <div class="form-group">
        <label for="Brand">Brand name:</label>
        <InputText id="Brand" class="form-control"
                   Value="@evCar.Brand" ValueChanged="@(e => evCar.SetBrand(e.ToString()))"
                   ValueExpression="(() => evCar.Brand)" />
    </div>*@
    
</EditForm>

@code{
    private void HandleValidEvCar()
    {
        ElectricCar.PrintBrand();
    }
    
    private string NeonConnectionStatus = "Not using neon.tech.";
    /*protected override async Task OnInitializedAsync()
    {
        try
        {
            using var connection = DbService.GetConnection();
            if (connection.State == System.Data.ConnectionState.Open)
            {
                NeonConnectionStatus = "Database connection successful";
            }
            else
            {
                NeonConnectionStatus = "Failed to connect to database";
            }
        }
        catch (Exception e)
        {
            NeonConnectionStatus = $"Error: {e.Message}";
        }
    }*/

    private string? MongoConnectionStatus;

    protected override async Task OnInitializedAsync()
    {
        if (await MongoService.CheckConnectionAsync())
        {
            MongoConnectionStatus = "Database connection successful";
        }
        else
        {
            MongoConnectionStatus = "Failed to connect to database";
        }
    }
    

}